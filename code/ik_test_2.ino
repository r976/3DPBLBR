#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include <math.h>

// Define constants
#define SERVO_MIN 150
#define SERVO_MAX 600
#define PI 3.14159265359

// Servo IDs for one leg
#define HIP_SERVO 8 // Entire leg sideways
#define SIDE_HIP_SERVO 7 // Hip moving femur, tibiotarsus, tarsometatarsus side to side
#define HIP_ROTATE_SERVO 6 // Hip rotating femur, tibiotarsus, tarsometatarsus
#define KNEE_SERVO 5 // Knee lifting tarsometatarsus and tibiotarsus
#define ANKLE_SERVO 4 // Ankle moving foot

// Physical dimensions of the leg (in cm)
const float L1 = 20.1; // Hip to Femur (proximal segment)
const float L2 = 5.5;  // Femur to Tibiotarsus (middle segment)
const float L3 = 17.5; // Tibiotarsus to Tarsometatarsus (distal segment)
const float L4 = 23.5; // Tarsometatarsus to Foot
//int points[5][2] = {{-23, 0}, {-22, -6}, {-22, -5}, {-22, -4}, {-22, -3}};
int points[1216][2] = {{-23, 0}, {-22, -6}, {-22, -5}, {-22, -4}, {-22, -3}, {-22, -2}, 
{-22, -1}, {-22, 0}, {-22, 1}, {-22, 2}, {-22, 3}, {-22, 4}, {-22, 5}, {-22, 6}, 
{-21, -9}, {-21, -8}, {-21, -7}, {-21, -6}, {-21, -5}, {-21, -4}, {-21, -3}, 
{-21, -2}, {-21, -1}, {-21, 0}, {-21, 1}, {-21, 2}, {-21, 3}, {-21, 4}, {-21, 5}, 
{-21, 6}, {-21, 7}, {-21, 8}, {-21, 9}, {-20, -11}, {-20, -10}, {-20, -9}, {-20, -8}, 
{-20, -7}, {-20, -6}, {-20, -5}, {-20, -4}, {-20, -3}, {-20, -2}, {-20, -1}, {-20, 0}, 
{-20, 1}, {-20, 2}, {-20, 3}, {-20, 4}, {-20, 5}, {-20, 6}, {-20, 7}, {-20, 8}, {-20, 9}, 
{-20, 10}, {-20, 11}, {-19, -12}, {-19, -11}, {-19, -10}, {-19, -9}, {-19, -8}, 
{-19, -7}, {-19, -6}, {-19, -5}, {-19, -4}, {-19, -3}, {-19, -2}, {-19, -1}, 
{-19, 0}, {-19, 1}, {-19, 2}, {-19, 3}, {-19, 4}, {-19, 5}, {-19, 6}, {-19, 7}, 
{-19, 8}, {-19, 9}, {-19, 10}, {-19, 11}, {-19, 12}, {-18, -14}, {-18, -13}, 
{-18, -12}, {-18, -11}, {-18, -10}, {-18, -9}, {-18, -8}, {-18, -7}, {-18, -6}, 
{-18, -5}, {-18, -4}, {-18, -3}, {-18, -2}, {-18, -1}, {-18, 0}, {-18, 1}, {-18, 2}, 
{-18, 3}, {-18, 4}, {-18, 5}, {-18, 6}, {-18, 7}, {-18, 8}, {-18, 9}, {-18, 10}, 
{-18, 11}, {-18, 12}, {-18, 13}, {-18, 14}, {-17, -15}, {-17, -14}, {-17, -13}, 
{-17, -12}, {-17, -11}, {-17, -10}, {-17, -9}, {-17, -8}, {-17, -7}, {-17, -6}, 
{-17, -5}, {-17, -4}, {-17, -3}, {-17, -2}, {-17, -1}, {-17, 0}, {-17, 1}, {-17, 2}, 
{-17, 3}, {-17, 4}, {-17, 5}, {-17, 6}, {-17, 7}, {-17, 8}, {-17, 9}, {-17, 10}, 
{-17, 11}, {-17, 12}, {-17, 13}, {-17, 14}, {-17, 15}, {-16, -16}, {-16, -15}, 
{-16, -14}, {-16, -13}, {-16, -12}, {-16, -11}, {-16, -10}, {-16, -9}, {-16, -8}, 
{-16, -7}, {-16, -6}, {-16, -5}, {-16, -4}, {-16, -3}, {-16, -2}, {-16, -1}, {-16, 0}, 
{-16, 1}, {-16, 2}, {-16, 3}, {-16, 4}, {-16, 5}, {-16, 6}, {-16, 7}, {-16, 8}, 
{-16, 9}, {-16, 10}, {-16, 11}, {-16, 12}, {-16, 13}, {-16, 14}, {-16, 15}, {-16, 16}, 
{-15, -17}, {-15, -16}, {-15, -15}, {-15, -14}, {-15, -13}, {-15, -12}, {-15, -11}, 
{-15, -10}, {-15, -9}, {-15, -8}, {-15, -7}, {-15, -6}, {-15, -5}, {-15, -4}, 
{-15, -3}, {-15, -2}, {-15, -1}, {-15, 0}, {-15, 1}, {-15, 2}, {-15, 3}, {-15, 4}, 
{-15, 5}, {-15, 6}, {-15, 7}, {-15, 8}, {-15, 9}, {-15, 10}, {-15, 11}, {-15, 12}, 
{-15, 13}, {-15, 14}, {-15, 15}, {-15, 16}, {-15, 17}, {-14, -18}, {-14, -17}, 
{-14, -16}, {-14, -15}, {-14, -14}, {-14, -13}, {-14, -12}, {-14, -11}, {-14, -10}, 
{-14, -9}, {-14, -8}, {-14, -7}, {-14, -6}, {-14, -5}, {-14, -4}, {-14, -3}, {-14, -2}, 
{-14, -1}, {-14, 0}, {-14, 1}, {-14, 2}, {-14, 3}, {-14, 4}, {-14, 5}, {-14, 6}, 
{-14, 7}, {-14, 8}, {-14, 9}, {-14, 10}, {-14, 11}, {-14, 12}, {-14, 13}, {-14, 14}, 
{-14, 15}, {-14, 16}, {-14, 17}, {-14, 18}, {-13, -18}, {-13, -17}, {-13, -16}, {-13, -15}, {-13, -14}, {-13, -13}, {-13, -12}, {-13, -11}, {-13, -10}, {-13, -9}, {-13, -8}, {-13, -7}, {-13, -6}, {-13, -5}, {-13, -4}, {-13, -3}, {-13, -2}, {-13, -1}, {-13, 0}, {-13, 1}, {-13, 2}, {-13, 3}, {-13, 4}, {-13, 5}, {-13, 6}, {-13, 7}, {-13, 8}, {-13, 9}, {-13, 10}, {-13, 11}, {-13, 12}, {-13, 13}, {-13, 14}, {-13, 15}, {-13, 16}, {-13, 17}, {-13, 18}, {-12, -19}, {-12, -18}, {-12, -17}, {-12, -16}, {-12, -15}, {-12, -14}, {-12, -13}, {-12, -12}, {-12, -11}, {-12, -10}, {-12, -9}, {-12, -8}, {-12, -7}, {-12, -6}, {-12, -5}, {-12, -4}, {-12, -3}, {-12, -2}, {-12, -1}, {-12, 0}, {-12, 1}, {-12, 2}, {-12, 3}, {-12, 4}, {-12, 5}, {-12, 6}, {-12, 7}, {-12, 8}, {-12, 9}, {-12, 10}, {-12, 11}, {-12, 12}, {-12, 13}, {-12, 14}, {-12, 15}, {-12, 16}, {-12, 17}, {-12, 18}, {-12, 19}, {-11, -20}, {-11, -19}, {-11, -18}, {-11, -17}, {-11, -16}, {-11, -15}, {-11, -14}, {-11, -13}, {-11, -12}, {-11, -11}, {-11, -10}, {-11, -9}, {-11, -8}, {-11, -7}, {-11, -6}, {-11, -5}, {-11, 5}, {-11, 6}, {-11, 7}, {-11, 8}, {-11, 9}, {-11, 10}, {-11, 11}, {-11, 12}, {-11, 13}, {-11, 14}, {-11, 15}, {-11, 16}, {-11, 17}, {-11, 18}, {-11, 19}, {-11, 20}, {-10, -20}, {-10, -19}, {-10, -18}, {-10, -17}, {-10, -16}, {-10, -15}, {-10, -14}, {-10, -13}, {-10, -12}, {-10, -11}, {-10, -10}, {-10, -9}, {-10, -8}, {-10, -7}, {-10, 7}, {-10, 8}, {-10, 9}, {-10, 10}, {-10, 11}, {-10, 12}, {-10, 13}, {-10, 14}, {-10, 15}, {-10, 16}, {-10, 17}, {-10, 18}, {-10, 19}, {-10, 20}, {-9, -21}, {-9, -20}, {-9, -19}, {-9, -18}, {-9, -17}, {-9, -16}, {-9, -15}, {-9, -14}, {-9, -13}, {-9, -12}, {-9, -11}, {-9, -10}, {-9, -9}, {-9, -8}, {-9, 8}, {-9, 9}, {-9, 10}, {-9, 11}, {-9, 12}, {-9, 13}, {-9, 14}, {-9, 15}, {-9, 16}, {-9, 17}, {-9, 18}, {-9, 19}, {-9, 20}, {-9, 21}, {-8, -21}, {-8, -20}, {-8, -19}, {-8, -18}, {-8, -17}, {-8, -16}, {-8, -15}, {-8, -14}, {-8, -13}, {-8, -12}, {-8, -11}, {-8, -10}, {-8, -9}, {-8, 9}, {-8, 10}, {-8, 11}, {-8, 12}, {-8, 13}, {-8, 14}, {-8, 15}, {-8, 16}, {-8, 17}, {-8, 18}, {-8, 19}, {-8, 20}, {-8, 21}, {-7, -21}, {-7, -20}, {-7, -19}, {-7, -18}, {-7, -17}, {-7, -16}, {-7, -15}, {-7, -14}, {-7, -13}, {-7, -12}, {-7, -11}, {-7, -10}, {-7, 10}, {-7, 11}, {-7, 12}, {-7, 13}, {-7, 14}, {-7, 15}, {-7, 16}, {-7, 17}, {-7, 18}, {-7, 19}, {-7, 20}, {-7, 21}, {-6, -22}, {-6, -21}, {-6, -20}, {-6, -19}, {-6, -18}, {-6, -17}, {-6, -16}, {-6, -15}, {-6, -14}, {-6, -13}, {-6, -12}, {-6, -11}, {-6, 11}, {-6, 12}, {-6, 13}, {-6, 14}, {-6, 15}, {-6, 16}, {-6, 17}, {-6, 18}, {-6, 19}, {-6, 20}, {-6, 21}, {-6, 22}, {-5, -22}, {-5, -21}, {-5, -20}, {-5, -19}, {-5, -18}, {-5, -17}, {-5, -16}, {-5, -15}, {-5, -14}, {-5, -13}, {-5, -12}, {-5, -11}, {-5, 11}, {-5, 12}, {-5, 13}, {-5, 14}, {-5, 15}, {-5, 16}, {-5, 17}, {-5, 18}, {-5, 19}, {-5, 20}, {-5, 21}, {-5, 22}, {-4, -22}, {-4, -21}, {-4, -20}, {-4, -19}, {-4, -18}, {-4, -17}, {-4, -16}, {-4, -15}, {-4, -14}, {-4, -13}, {-4, -12}, {-4, 12}, {-4, 13}, {-4, 14}, {-4, 15}, {-4, 16}, {-4, 17}, {-4, 18}, {-4, 19}, {-4, 20}, {-4, 21}, {-4, 22}, {-3, -22}, {-3, -21}, {-3, -20}, {-3, -19}, {-3, -18}, {-3, -17}, {-3, -16}, {-3, -15}, {-3, -14}, {-3, -13}, {-3, -12}, {-3, 12}, {-3, 13}, {-3, 14}, {-3, 15}, {-3, 16}, {-3, 17}, {-3, 18}, {-3, 19}, {-3, 20}, {-3, 21}, {-3, 22}, {-2, -22}, {-2, -21}, {-2, -20}, {-2, -19}, {-2, -18}, {-2, -17}, {-2, -16}, {-2, -15}, {-2, -14}, {-2, -13}, {-2, -12}, {-2, 12}, {-2, 13}, {-2, 14}, {-2, 15}, {-2, 16}, {-2, 17}, {-2, 18}, {-2, 19}, {-2, 20}, {-2, 21}, {-2, 22}, {-1, -22}, {-1, -21}, {-1, -20}, {-1, -19}, {-1, -18}, {-1, -17}, {-1, -16}, {-1, -15}, {-1, -14}, {-1, -13}, {-1, -12}, {-1, 12}, {-1, 13}, {-1, 14}, {-1, 15}, {-1, 16}, {-1, 17}, {-1, 18}, {-1, 19}, {-1, 20}, {-1, 21}, {-1, 22}, {0, -23}, {0, -22}, {0, -21}, {0, -20}, {0, -19}, {0, -18}, {0, -17}, {0, -16}, {0, -15}, {0, -14}, {0, -13}, {0, -12}, {0, 12}, {0, 13}, {0, 14}, {0, 15}, {0, 16}, {0, 17}, {0, 18}, {0, 19}, {0, 20}, {0, 21}, {0, 22}, {0, 23}, {1, -22}, {1, -21}, {1, -20}, {1, -19}, {1, -18}, {1, -17}, {1, -16}, {1, -15}, {1, -14}, {1, -13}, {1, -12}, {1, 12}, {1, 13}, {1, 14}, {1, 15}, {1, 16}, {1, 17}, {1, 18}, {1, 19}, {1, 20}, {1, 21}, {1, 22}, {2, -22}, {2, -21}, {2, -20}, {2, -19}, {2, -18}, {2, -17}, {2, -16}, {2, -15}, {2, -14}, {2, -13}, {2, -12}, {2, 12}, {2, 13}, {2, 14}, {2, 15}, {2, 16}, {2, 17}, {2, 18}, {2, 19}, {2, 20}, {2, 21}, {2, 22}, {3, -22}, {3, -21}, {3, -20}, {3, -19}, {3, -18}, {3, -17}, {3, -16}, {3, -15}, {3, -14}, {3, -13}, {3, -12}, {3, 12}, {3, 13}, {3, 14}, {3, 15}, {3, 16}, {3, 17}, {3, 18}, {3, 19}, {3, 20}, {3, 21}, {3, 22}, {4, -22}, {4, -21}, {4, -20}, {4, -19}, {4, -18}, {4, -17}, {4, -16}, {4, -15}, {4, -14}, {4, -13}, {4, -12}, {4, 12}, {4, 13}, {4, 14}, {4, 15}, {4, 16}, {4, 17}, {4, 18}, {4, 19}, {4, 20}, {4, 21}, {4, 22}, {5, -22}, {5, -21}, {5, -20}, {5, -19}, {5, -18}, {5, -17}, {5, -16}, {5, -15}, {5, -14}, {5, -13}, {5, -12}, {5, -11}, {5, 11}, {5, 12}, {5, 13}, {5, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {5, 19}, {5, 20}, {5, 21}, {5, 22}, {6, -22}, {6, -21}, {6, -20}, {6, -19}, {6, -18}, {6, -17}, {6, -16}, {6, -15}, {6, -14}, {6, -13}, {6, -12}, {6, -11}, {6, 11}, {6, 12}, {6, 13}, {6, 14}, {6, 15}, {6, 16}, {6, 17}, {6, 18}, {6, 19}, {6, 20}, {6, 21}, {6, 22}, {7, -21}, {7, -20}, {7, -19}, {7, -18}, {7, -17}, {7, -16}, {7, -15}, {7, -14}, {7, -13}, {7, -12}, {7, -11}, {7, -10}, {7, 10}, {7, 11}, {7, 12}, {7, 13}, {7, 14}, {7, 15}, {7, 16}, {7, 17}, {7, 18}, {7, 19}, {7, 20}, {7, 21}, {8, -21}, {8, -20}, {8, -19}, {8, -18}, {8, -17}, {8, -16}, {8, -15}, {8, -14}, {8, -13}, {8, -12}, {8, -11}, {8, -10}, {8, -9}, {8, 9}, {8, 10}, {8, 11}, {8, 12}, {8, 13}, {8, 14}, {8, 15}, {8, 16}, {8, 17}, {8, 18}, {8, 19}, {8, 20}, {8, 21}, {9, -21}, {9, -20}, {9, -19}, {9, -18}, {9, -17}, {9, -16}, {9, -15}, {9, -14}, {9, -13}, {9, -12}, {9, -11}, {9, -10}, {9, -9}, {9, -8}, {9, 8}, {9, 9}, {9, 10}, {9, 11}, {9, 12}, {9, 13}, {9, 14}, {9, 15}, {9, 16}, {9, 17}, {9, 18}, {9, 19}, {9, 20}, {9, 21}, {10, -20}, {10, -19}, {10, -18}, {10, -17}, {10, -16}, {10, -15}, {10, -14}, {10, -13}, {10, -12}, {10, -11}, {10, -10}, {10, -9}, {10, -8}, {10, -7}, {10, 7}, {10, 8}, {10, 9}, {10, 10}, {10, 11}, {10, 12}, {10, 13}, {10, 14}, {10, 15}, {10, 16}, {10, 17}, {10, 18}, {10, 19}, {10, 20}, {11, -20}, {11, -19}, {11, -18}, {11, -17}, {11, -16}, {11, -15}, {11, -14}, {11, -13}, {11, -12}, {11, -11}, {11, -10}, {11, -9}, {11, -8}, {11, -7}, {11, -6}, {11, -5}, {11, 5}, {11, 6}, {11, 7}, {11, 8}, {11, 9}, {11, 10}, {11, 11}, {11, 12}, {11, 13}, {11, 14}, {11, 15}, {11, 16}, {11, 17}, {11, 18}, {11, 19}, {11, 20}, {12, -19}, {12, -18}, {12, -17}, {12, -16}, {12, -15}, {12, -14}, {12, -13}, {12, -12}, {12, -11}, {12, -10}, {12, -9}, {12, -8}, {12, -7}, {12, -6}, {12, -5}, {12, -4}, {12, -3}, {12, -2}, {12, -1}, {12, 0}, {12, 1}, {12, 2}, {12, 3}, {12, 4}, {12, 5}, {12, 6}, {12, 7}, {12, 8}, {12, 9}, {12, 10}, {12, 11}, {12, 12}, {12, 13}, {12, 14}, {12, 15}, {12, 16}, {12, 17}, {12, 18}, {12, 19}, {13, -18}, {13, -17}, {13, -16}, {13, -15}, {13, -14}, {13, -13}, {13, -12}, {13, -11}, {13, -10}, {13, -9}, {13, -8}, {13, -7}, {13, -6}, {13, -5}, {13, -4}, {13, -3}, {13, -2}, {13, -1}, {13, 0}, {13, 1}, {13, 2}, {13, 3}, {13, 4}, {13, 5}, {13, 6}, {13, 7}, {13, 8}, {13, 9}, {13, 10}, {13, 11}, {13, 12}, {13, 13}, {13, 14}, {13, 15}, {13, 16}, {13, 17}, {13, 18}, {14, -18}, {14, -17}, {14, -16}, {14, -15}, {14, -14}, {14, -13}, {14, -12}, {14, -11}, {14, -10}, {14, -9}, {14, -8}, {14, -7}, {14, -6}, {14, -5}, {14, -4}, {14, -3}, {14, -2}, {14, -1}, {14, 0}, {14, 1}, {14, 2}, {14, 3}, {14, 4}, {14, 5}, {14, 6}, {14, 7}, {14, 8}, {14, 9}, {14, 10}, {14, 11}, {14, 12}, {14, 13}, {14, 14}, {14, 15}, {14, 16}, {14, 17}, {14, 18}, {15, -17}, {15, -16}, {15, -15}, {15, -14}, {15, -13}, {15, -12}, {15, -11}, {15, -10}, {15, -9}, {15, -8}, {15, -7}, {15, -6}, {15, -5}, {15, -4}, {15, -3}, {15, -2}, {15, -1}, {15, 0}, {15, 1}, {15, 2}, {15, 3}, {15, 4}, {15, 5}, {15, 6}, {15, 7}, {15, 8}, {15, 9}, {15, 10}, {15, 11}, {15, 12}, {15, 13}, {15, 14}, {15, 15}, {15, 16}, {15, 17}, {16, -16}, {16, -15}, {16, -14}, {16, -13}, {16, -12}, {16, -11}, {16, -10}, {16, -9}, {16, -8}, {16, -7}, {16, -6}, {16, -5}, {16, -4}, {16, -3}, {16, -2}, {16, -1}, {16, 0}, {16, 1}, {16, 2}, {16, 3}, {16, 4}, {16, 5}, {16, 6}, {16, 7}, {16, 8}, {16, 9}, {16, 10}, {16, 11}, {16, 12}, {16, 13}, {16, 14}, {16, 15}, {16, 16}, {17, -15}, {17, -14}, {17, -13}, {17, -12}, {17, -11}, {17, -10}, {17, -9}, {17, -8}, {17, -7}, {17, -6}, {17, -5}, {17, -4}, {17, -3}, {17, -2}, {17, -1}, {17, 0}, {17, 1}, {17, 2}, {17, 3}, {17, 4}, {17, 5}, {17, 6}, {17, 7}, {17, 8}, {17, 9}, {17, 10}, {17, 11}, {17, 12}, {17, 13}, {17, 14}, {17, 15}, {18, -14}, {18, -13}, {18, -12}, {18, -11}, {18, -10}, {18, -9}, {18, -8}, {18, -7}, {18, -6}, {18, -5}, {18, -4}, {18, -3}, {18, -2}, {18, -1}, {18, 0}, {18, 1}, {18, 2}, {18, 3}, {18, 4}, {18, 5}, {18, 6}, {18, 7}, {18, 8}, {18, 9}, {18, 10}, {18, 11}, {18, 12}, {18, 13}, {18, 14}, {19, -12}, {19, -11}, {19, -10}, {19, -9}, {19, -8}, {19, -7}, {19, -6}, {19, -5}, {19, -4}, {19, -3}, {19, -2}, {19, -1}, {19, 0}, {19, 1}, {19, 2}, {19, 3}, {19, 4}, {19, 5}, {19, 6}, {19, 7}, {19, 8}, {19, 9}, {19, 10}, {19, 11}, {19, 12}, {20, -11}, {20, -10}, {20, -9}, {20, -8}, {20, -7}, {20, -6}, {20, -5}, {20, -4}, {20, -3}, {20, -2}, {20, -1}, {20, 0}, {20, 1}, {20, 2}, {20, 3}, {20, 4}, {20, 5}, {20, 6}, {20, 7}, {20, 8}, {20, 9}, {20, 10}, {20, 11}, {21, -9}, {21, -8}, {21, -7}, {21, -6}, {21, -5}, {21, -4}, {21, -3}, {21, -2}, {21, -1}, {21, 0}, {21, 1}, {21, 2}, {21, 3}, {21, 4}, {21, 5}, {21, 6}, {21, 7}, {21, 8}, {21, 9}, {22, -6}, {22, -5}, {22, -4}, {22, -3}, {22, -2}, {22, -1}, {22, 0}, {22, 1}, 
{22, 2}, {22, 3}, {22, 4}, {22, 5}, {22, 6}, {23, 0}};
int inc = 0;
// Servo driver object
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Map angle to servo pulse length
int angleToPulse(float angle) {
  return map(angle, 0, 180, SERVO_MIN, SERVO_MAX);
}

// Compute inverse kinematics for the bird leg
void computeIK(float targetX, float targetY, float* angles) {
  targetX = -22; // A mid-range value
  targetY = -4;
  float D = sqrt(targetX * targetX + targetY * targetY);

  // Define reachable limits
  float L_min = fabs(L2 - L3);
  float L_max = L2 + L3;
  
  
  Serial.println("D=");
    Serial.println(D);
    Serial.println("L_min");
    Serial.println(L_min);
    Serial.println("L_max");
    Serial.println(L_max);
    delay(3000);


  if (D > L_max) {
    Serial.println("Target too far. Adjusting...");
    float scale = L_max / D; // Scale down to max distance
    targetX *= scale;
    targetY *= scale;
    D = L_max;
  } else if (D < L_min) {
    Serial.println("Target too close. Adjusting...");
    Serial.print("Adjusted Target: ");
    Serial.print(targetX);
    Serial.print(", ");
    Serial.println(targetY);
    float scale = L_min / D; // Scale up to min distance
    targetX *= scale;
    targetY *= scale;
    D = L_min;
  }

  // IK calculations
  float angleA = atan2(targetY, targetX);
  Serial.println("angleA");
  Serial.println(angleA);
  float angleB = acos((L2 * L2 + D * D - L3 * L3) / (2 * L2 * D));
  Serial.println("angleB");
  Serial.println(angleB);
  float theta1 = angleA + angleB;

  float angleC = acos((L2 * L2 + L3 * L3 - D * D) / (2 * L2 * L3));
  Serial.println("angleC");
  Serial.println(angleC);
  float theta2 = PI - angleC;

  float theta3 = -(theta1 + theta2);

  // Convert angles to degrees for servos and add offsets
  angles[0] = 90 + 5; // Hip side angle (fixed with offset)
  angles[1] = 90 - 5; // Side hip servo (fixed with offset)
  angles[2] = degrees(theta1) + 10; // Hip rotation angle with offset
  angles[3] = degrees(theta2) - 10; // Knee angle with offset
  angles[4] = degrees(theta3) + 15; // Ankle angle with offset
}



// Move servos based on IK calculations
void moveServos(float* angles) {
  //pwm.setPWM(HIP_SERVO, 0, angleToPulse(angles[0]));
  //pwm.setPWM(SIDE_HIP_SERVO, 0, angleToPulse(angles[1]));
  pwm.setPWM(HIP_ROTATE_SERVO, 0, angleToPulse(angles[2]));
  pwm.setPWM(KNEE_SERVO, 0, angleToPulse(angles[3]));
  pwm.setPWM(ANKLE_SERVO, 0, angleToPulse(angles[4]));
}

// Define walking cycle parameters
const int CYCLE_STEPS = 10; // Number of steps in one cycle
float gaitPhase = 0.0; // Current phase of the gait cycle (0 to 1)

// Generate target foot position for walking
void generateTarget(float targetX, float targetY, int index) {
  // Forward/backward motion (sine wave for swing phase)
  //*targetX = 5.0 * cos(2 * PI * gaitPhase);

  // Up/down motion (triangle wave for lifting during swing phase)
  //if (gaitPhase < 0.5) {
    //*targetY = -3.0 + 6.0 * gaitPhase * 2; // Lift foot
  //} else {
    //*targetY = -3.0 + 6.0 * (1 - gaitPhase) * 2; // Lower foot
 //}

  // Update gait phase
  //gaitPhase += 1.0 / CYCLE_STEPS;
  //if (gaitPhase >= 1.0) {
    //gaitPhase = 0.0; // Reset phase at the end of the cycle
  //}
    Serial.println("index");
    Serial.println(index);
    targetX = points[index][0]; // Access x coordinate
    targetY = points[index][1]; // Access y coordinate

    Serial.print("targetX ");
    Serial.print(targetX);
    Serial.print("targety");
    Serial.print(targetY);
    delay(10000);
  
}

void setup() {
  Serial.begin(115200);
  pwm.begin();
  Serial.println("PCA9685 Initialized");
  pwm.setPWMFreq(60); // Set servo frequency to 60 Hz

  Serial.println("Starting IK Computation");
}

void loop() {
  // Target position for foot (end effector)
  float targetX = 12;
  float targetY = 0;
  
  // Generate next target position in walking cycle
  generateTarget(targetX, targetY, inc);

  // Array to store angles for servos
  float angles[5] = {0, 0, 0, 0, 0};



  // Compute inverse kinematics
  computeIK(targetX, targetY, angles);

  // Move servos to computed angles
  moveServos(angles);
  inc++;

  delay(100); // Adjust timing for smoother walking
}

